#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        mouse_prev {
            bindings = <&mkp MB4>;
            key-positions = <43 44 45>;
        };

        mouse_next {
            bindings = <&mkp MB5>;
            key-positions = <44 45 46>;
        };

        mouse_scroll {
            bindings = <&mo 2>;
            key-positions = <45 46>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        DEFAULT_LAYER {
            bindings = <
&kp ESC    &kp N1  &kp N2     &kp N3    &kp N4        &kp N5                                  &kp N6  &kp N7  &kp N8     &kp N9   &kp N0     &kp BSPC
&kp TAB    &kp Q   &kp W      &kp E     &kp R         &kp T                                   &kp Y   &kp U   &kp I      &kp O    &kp P      &kp BACKSLASH
&kp LCTRL  &kp A   &kp S      &kp D     &kp F         &kp G                                   &kp H   &kp J   &kp K      &kp L    &kp SEMI   &kp ENTER
&kp LSHFT  &kp Z   &kp X      &kp C     &kp V         &kp B      &mo 2      &kp SINGLE_QUOTE  &kp N   &kp M   &kp COMMA  &kp DOT  &kp SLASH  &kp RSHFT
&mo 3      &trans  &kp LCTRL  &kp LALT  &kp LEFT_GUI  &mkp LCLK  &kp SPACE  &kp SPACE         &mo 1   &trans  &trans     &trans   &trans     &mo 3
            >;
        };

        FUNCTION_LAYER {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                &kp F6   &kp F7          &kp F8          &kp F9           &kp F10           &trans
&trans  &trans  &trans  &trans  &trans  &trans                                &kp F11  &kp F12         &kp UP_ARROW    &trans           &kp MINUS         &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &kp C_VOLUME_UP                       &trans   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans  &trans  &trans  &trans  &trans  &kp C_VOLUME_DOWN  &trans  &kp GRAVE  &trans   &mkp LCLK       &mkp RCLK       &mkp MCLK        &trans            &trans
&trans  &trans  &trans  &trans  &trans  &trans             &trans  &trans     &trans   &trans          &trans          &trans           &trans            &trans
            >;
        };

        SCROLL_LAYER {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        SYSTEM_LAYER {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&trans  &out OUT_BLE  &out OUT_USB  &trans        &trans        &bt BT_CLR                              &out OUT_BLE  &out OUT_USB  &trans        &trans        &bt BT_CLR    &trans
&trans  &trans        &trans        &trans        &trans        &trans                                  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans        &trans        &bootloader  &bootloader  &trans        &trans        &trans        &trans        &trans        &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans       &trans       &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
